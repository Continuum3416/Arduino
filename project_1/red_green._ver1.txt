// Pin definitions
const int RED_LEDS[]   = {13, 12, 11};
const int BLUE_LEDS[]  = {10, 9, 8};
const int SPEAKER_PIN  = 7;
const int SPEAKER2_PIN = 4;
const int BUTTON_PIN   = 2;
const int PIR_PIN      = 3;
const int GREEN_LED    = 5;
const int RED_LED      = 6;

const int NUM_LEDS     = 3;
const int SONG_LENGTH  = 10;
const unsigned long DEBOUNCE_DELAY = 50;
const unsigned long GAME_PHASE_DURATION = 3000; // 3 seconds

// Song
int song[SONG_LENGTH] = { 415, 554, 554, 554, 494, 554, 554, 415, 415, 494 };
int noteDurations[SONG_LENGTH];

// State flags
bool isRunning = false;
bool motionDetected = false;
bool isGreenPhase = true;

// Timing
unsigned long previousLedTime = 0;
unsigned long previousNoteTime = 0;
unsigned long lastPhaseSwitchTime = 0;
int currentNote = 0;
int ledStep = 0;

// Button state
bool lastButtonState = HIGH;
bool currentButtonState = HIGH;
unsigned long lastDebounceTime = 0;

// Helper
void initialize_array(int *arr, const int size, const int value) {
  for (int i = 0; i < size; i++) {
    arr[i] = value;
  }
}

void setup() {
  Serial.begin(9600);
  initialize_array(noteDurations, SONG_LENGTH, 300);

  for (int i = 0; i < NUM_LEDS; i++) {
    pinMode(RED_LEDS[i], OUTPUT);
    pinMode(BLUE_LEDS[i], OUTPUT);
  }

  pinMode(SPEAKER_PIN, OUTPUT);
  pinMode(SPEAKER2_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(PIR_PIN, INPUT);
  pinMode(GREEN_LED, OUTPUT);
  pinMode(RED_LED, OUTPUT);

  digitalWrite(GREEN_LED, LOW);
  digitalWrite(RED_LED, LOW);
}

void loop() {
  handleButton();

  if (isRunning) {
    updateGamePhase();

    if (isGreenPhase) {
      // Green phase: movement allowed
      digitalWrite(GREEN_LED, HIGH);
      digitalWrite(RED_LED, LOW);
      Serial.println("Green light! You can move.");
    } else {
      // Red phase: no movement allowed
      digitalWrite(GREEN_LED, LOW);
      digitalWrite(RED_LED, HIGH);

      motionDetected = digitalRead(PIR_PIN) == HIGH;

      if (motionDetected) {
        stopLeds();
        stopSong();
        playGunSound();
        Serial.println("ðŸ”« You moved! Game over!");
      } else {
        updateSong();
        updateLeds();
        Serial.println("Red light: No motion detected. Continue...");
      }
    }
  } else {
    stopAll();
    digitalWrite(GREEN_LED, LOW);
    digitalWrite(RED_LED, LOW);
  }
}

void updateGamePhase() {
  unsigned long currentTime = millis();
  if (currentTime - lastPhaseSwitchTime >= GAME_PHASE_DURATION) {
    isGreenPhase = !isGreenPhase; // Toggle phase
    lastPhaseSwitchTime = currentTime;

    if (!isGreenPhase) {
      Serial.println("Red Light!");
    } else {
      Serial.println("Green Light!");
    }
  }
}

void handleButton() {
  int reading = digitalRead(BUTTON_PIN);
  if (reading != lastButtonState) {
    lastDebounceTime = millis();
  }

  if ((millis() - lastDebounceTime) > DEBOUNCE_DELAY) {
    if (reading != currentButtonState) {
      currentButtonState = reading;
      if (currentButtonState == LOW) {
        isRunning = !isRunning;
        currentNote = 0;
        ledStep = 0;
        isGreenPhase = true;
        lastPhaseSwitchTime = millis();
        stopAll();
      }
    }
  }

  lastButtonState = reading;
}

void updateSong() {
  unsigned long currentTime = millis();
  if (currentNote < SONG_LENGTH) {
    int duration = noteDurations[currentNote];
    if (currentTime - previousNoteTime >= duration * 1.3) {
      if (song[currentNote] != 0) {
        tone(SPEAKER_PIN, song[currentNote], duration);
      } else {
        noTone(SPEAKER_PIN);
      }
      previousNoteTime = currentTime;
      currentNote++;
    }
  } else {
    currentNote = 0;
  }
}

void updateLeds() {
  unsigned long currentTime = millis();
  if (currentTime - previousLedTime >= 100) {
    previousLedTime = currentTime;
    switch (ledStep) {
      case 0:
        digitalWrite(RED_LEDS[0], HIGH);
        digitalWrite(RED_LEDS[1], HIGH);
        digitalWrite(BLUE_LEDS[0], HIGH);
        digitalWrite(BLUE_LEDS[1], HIGH);
        break;
      case 1:
        digitalWrite(RED_LEDS[0], LOW);
        digitalWrite(RED_LEDS[1], LOW);
        digitalWrite(BLUE_LEDS[0], LOW);
        digitalWrite(BLUE_LEDS[1], LOW);
        break;
      case 2:
        digitalWrite(RED_LEDS[2], HIGH);
        digitalWrite(RED_LEDS[1], HIGH);
        digitalWrite(BLUE_LEDS[2], HIGH);
        digitalWrite(BLUE_LEDS[1], HIGH);
        break;
      case 3:
        digitalWrite(RED_LEDS[2], LOW);
        digitalWrite(RED_LEDS[1], LOW);
        digitalWrite(BLUE_LEDS[2], LOW);
        digitalWrite(BLUE_LEDS[1], LOW);
        break;
    }
    ledStep = (ledStep + 1) % 4;
  }
}

void stopLeds() {
  for (int i = 0; i < NUM_LEDS; i++) {
    digitalWrite(RED_LEDS[i], LOW);
    digitalWrite(BLUE_LEDS[i], LOW);
  }
}

void stopSong() {
  noTone(SPEAKER_PIN);
}

void playGunSound() {
  tone(SPEAKER2_PIN, 200, 60);
  delay(60);
  tone(SPEAKER2_PIN, 100, 40);
  delay(40);
  noTone(SPEAKER2_PIN);
}

void stopAll() {
  stopLeds();
  stopSong();
  noTone(SPEAKER2_PIN);
}
