// Pin definitions
const int LEFT_RED     = 13;
const int MIDDLE_RED   = 12;
const int RIGHT_RED    = 11;
const int LEFT_BLUE    = 10;
const int MIDDLE_BLUE  = 9;
const int RIGHT_BLUE   = 8;
const int SPEAKER_PIN  = 7;
const int SPEAKER2_PIN = 4;
const int BUTTON_PIN   = 2;
const int PIR_PIN      = 3;

// Squid game theme
int song[10] = { 415, 554, 554, 554, 494, 554, 554, 415, 415, 494 };
int noteDurations[10];

// Variables used in loops to detect if the arduino is running
bool isRunning = false;
bool motionDetected = false;

// LED animation logic
unsigned long previousLedTime = 0;
int ledStep = 0;

// Variables for button state handling
bool lastButtonState = HIGH;
bool currentButtonState = HIGH;
unsigned long lastDebounceTime = 0;
const unsigned long debounceDelay = 50;

// Function to fill an array with a value
// Input: pointer to array, array size, and value
// Used to fill noteDurations with one specific value
void initialize_array(int *arr, const int size, const int value)
{
  for (int i = 0; i < size; i++) {
    arr[i] = value;
  }
}

// setup components
void setup() {
  Serial.begin(9600);

  // set note duration to 300ms
  initialize_array(noteDurations, 10, 300);

  pinMode(LEFT_RED, OUTPUT);
  pinMode(MIDDLE_RED, OUTPUT);
  pinMode(RIGHT_RED, OUTPUT);
  pinMode(LEFT_BLUE, OUTPUT);
  pinMode(MIDDLE_BLUE, OUTPUT);
  pinMode(RIGHT_BLUE, OUTPUT);
  pinMode(SPEAKER_PIN, OUTPUT);
  pinMode(SPEAKER2_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(PIR_PIN, INPUT);
}


void loop() {
  handleButton();

  // If is running, AKA the button is turned on
  // isRunning is set to false initially
  if (isRunning) {
    // read from PIR
    motionDetected = digitalRead(PIR_PIN) == HIGH;

    // if there's motion, stop LED, stop song and start blasting those guns
    if (motionDetected) {
      stopLeds();
      stopSong();
      playGunSound();
      Serial.println("Shooting.");
    } else {
      updateSong();
      updateLeds();
      Serial.println("No motion, playing music + lights");
    }
  } else {
    stopAll();
  }
}

// Button toggle function with debounce
unsigned long previousNoteTime = 0;
int currentNote = 0;

void handleButton() {
  int reading = digitalRead(BUTTON_PIN);

  if (reading != lastButtonState) {
    lastDebounceTime = millis();
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (reading != currentButtonState) {
      currentButtonState = reading;
      if (currentButtonState == LOW) {
        isRunning = !isRunning;
        currentNote = 0;
        ledStep = 0;
        stopAll();
      }
    }
  }

  lastButtonState = reading;
}

// Music player
void updateSong() {
  unsigned long currentTime = millis();
  int songLength = sizeof(song) / sizeof(int);

  if (currentNote < songLength) {
    int duration = noteDurations[currentNote];

    // Prevent debounce
    if (currentTime - previousNoteTime >= duration * 1.3) {
      if (song[currentNote] != 0) {
        tone(SPEAKER_PIN, song[currentNote], duration);
      } else {
        noTone(SPEAKER_PIN);
      }
      previousNoteTime = currentTime;
      currentNote++;
    }
  } else {
    currentNote = 0;  // Loop
  }
}

void stopSong() {
  noTone(SPEAKER_PIN);
}

// LED animation
void updateLeds() {
  unsigned long currentTime = millis();

  if (currentTime - previousLedTime >= 100) {
    previousLedTime = currentTime;

    switch (ledStep) {
      case 0:
        digitalWrite(LEFT_RED, HIGH);
        digitalWrite(MIDDLE_RED, HIGH);
        digitalWrite(LEFT_BLUE, HIGH);
        digitalWrite(MIDDLE_BLUE, HIGH);
        break;
      case 1:
        digitalWrite(LEFT_RED, LOW);
        digitalWrite(MIDDLE_RED, LOW);
        digitalWrite(LEFT_BLUE, LOW);
        digitalWrite(MIDDLE_BLUE, LOW);
        break;
      case 2:
        digitalWrite(RIGHT_RED, HIGH);
        digitalWrite(MIDDLE_RED, HIGH);
        digitalWrite(RIGHT_BLUE, HIGH);
        digitalWrite(MIDDLE_BLUE, HIGH);
        break;
      case 3:
        digitalWrite(RIGHT_RED, LOW);
        digitalWrite(MIDDLE_RED, LOW);
        digitalWrite(RIGHT_BLUE, LOW);
        digitalWrite(MIDDLE_BLUE, LOW);
        break;
    }

    // Loop back
    ledStep = (ledStep + 1) % 4;
  }
}

// Stop LED animation
// set output to LOW
void stopLeds() {
  digitalWrite(LEFT_RED, LOW);
  digitalWrite(MIDDLE_RED, LOW);
  digitalWrite(RIGHT_RED, LOW);
  digitalWrite(LEFT_BLUE, LOW);
  digitalWrite(MIDDLE_BLUE, LOW);
  digitalWrite(RIGHT_BLUE, LOW);
}

// Gun sound effect
void playGunSound() {
  tone(SPEAKER2_PIN, 200, 60);
  delay(60);
  tone(SPEAKER2_PIN, 100, 40);
  delay(40);
  noTone(SPEAKER2_PIN);
}

// Turn off everything
void stopAll() {
  stopLeds();
  stopSong();
  noTone(SPEAKER2_PIN);
}